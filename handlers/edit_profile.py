from aiogram import Router, F

from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from bot_states import EditState
from crud_user_file import edit_profile_for_value
from filters import check_email, check_num
from handlers.command_handlers import change_profile, handle_run
from inline_keyboard import kb_company

router = Router()


@router.message(F.text, EditState.edit_state)
async def answer_edit_value(message: Message, state: FSMContext):
    text = message.text.lower()
    if text == '–ø–æ—á—Ç–∞ üìß' or '–ø–æ—á—Ç–∞' in text:
        await state.set_state(EditState.edit_value_email)
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É')
        await state.update_data(edit_state=True)
        await state.update_data(edit_column='user_email')

    elif text == '–Ω–æ–º–µ—Ä üì±' or '–Ω–æ–º–µ—Ä' in text:
        await state.set_state(EditState.edit_value_phone)
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä')
        await state.update_data(edit_state=True)
        await state.update_data(edit_column='user_phone')

    elif text.lower() == '–∫–æ–º–ø–∞–Ω–∏—è' or '–ö–æ–º–ø–∞–Ω–∏—è' in text:
        await state.set_state(EditState.edit_company)
        await state.update_data(edit_stat=True)
        await state.update_data(edit_column='company_name')
        await message.answer('–í –∫–∞–∫—É—é –∫–æ–º–ø–∞–Ω–∏—é –≤—ã –ø–µ—Ä–µ—à–ª–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:', reply_markup=kb_company())


    elif text == '–¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç / –æ—Ç–¥–µ–ª' or '–æ—Ç–¥–µ–ª' in text:
        await state.set_state(EditState.edit_departament)
        await state.update_data(edit_start=True)
        await state.update_data(edit_column='department')
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞–∫–æ–π –æ—Ç–¥–µ–ª –ø–µ—Ä–µ—à–ª–∏.')




@router.callback_query(F.data, EditState.edit_company)
async def edit_company_in_profile(call: CallbackQuery, state: FSMContext):
    await state.update_data(edit_company=call.data)
    user_id = call.from_user.id
    data = await state.get_data()
    key_company = data.get('edit_column')
    edit_value = data.get('edit_company')
    result = edit_profile_for_value(user_id, key_company, edit_value)
    await call.message.answer(result)
    # —Ç—É—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–≤–æ–¥
    await state.clear()
    await handle_run(call.message)

@router.message(F.text, EditState.edit_company)
async def wrong_value(message: Message, state: FSMContext):
    await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.')
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏—é', reply_markup=kb_company())



@router.message(F.text, EditState.edit_departament)
async def edit_department_in_profile(message: Message, state: FSMContext):
    await state.update_data(edit_departament=message.text)
    user_id = message.from_user.id
    data = await state.get_data()
    key_company = data.get('edit_column')
    edit_value = data.get('edit_departament')
    result = edit_profile_for_value(user_id, key_company, edit_value)
    await message.answer(result)
    # —Ç—É—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–≤–æ–¥
    await state.clear()
    await handle_run(message)


@router.message(F.text, EditState.edit_value_email)
async def get_edit_value(message: Message, state: FSMContext)-> None:
    if len(message.text.split()) == 1 and check_email(message.text):
        await state.update_data(edit_value_email=message.text)
        data = await state.get_data()
        user_id = message.from_user.id
        key_email = data.get('edit_column')
        value_email = data.get('edit_value_email')

        result = edit_profile_for_value(user_id, key_email, value_email)
        await message.answer(result)
        # —Ç—É—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–≤–æ–¥
        await state.clear()
        await handle_run(message)
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        await state.set_state(EditState.edit_value_email)
        return



@router.message(F.text, EditState.edit_value_phone)
async def get_edit_value(message: Message, state: FSMContext)-> None:
    if len(message.text.split()) == 1 and check_num(message.text):
        await state.update_data(edit_value_phone=message.text)
        data = await state.get_data()

        user_id = message.from_user.id
        key_phone = data.get('edit_phone')
        value_phone = int(data.get('edit_value_phone'))

        result = edit_profile_for_value(user_id, key_phone, value_phone)
        # —Ç—É—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–≤–æ–¥
        await message.answer(result)
        await state.clear()

        await handle_run(message)
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        await state.set_state(EditState.edit_value_phone)
        return


@router.message(F.text, EditState.edit_state)
async def answer_edit_wrong_value(message: Message, state: FSMContext)-> None:
    await message.answer('–í—ã –æ—à–∏–±–ª–∏—Å—å, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ ‚¨áÔ∏è')
    await state.clear()
    await change_profile(message, state)
